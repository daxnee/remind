<메소드 오버로딩(overloading)> ★ 시험문제로 출제 (주관식)

파라미터값이 다르면 똑같은 메소드를 쓸수 있음
목적 : 이름이 같은 여러개의 메소드를     
  중복 선언하여 사용의 편리성을 제공

조건 :  1-이름이 동일해야함.
       2-인자의 개수가 달라야 함
       3-인자의 타입이 달라야 함
       4-동일한 클래스 파일 안에 있어야 함

결론 : 메소드는 파라미터값이 중요함

<클래스> (자바에센셜 책 133p)
자바는 '객체 / 지향 / 언어'
객체란 고유한 특성을 가짐
객체들이 모여서 하나의 프로그램이 탄생함

(마우스, 키보드, 모니터, 본체, 스피커 ...) => 객체(Object)
=> 컴퓨터를 하게 됨!

클래스(객체)가 모여서 하나의 프로그램이 탄생


★객체 지향 언어 특징(면접 필)★ - 자바특징x
1. 캡슐화
    - 내부를 마치 캡슐처럼 보호
      클래스가 메소드를 담고 있다
    public class는 해당 클래스 파일에 한 번만 올 수 있다(고유함)


2. 상속
    - 클래스를 부모와 자식으로 두고 부모의 기능을 물려받음
3. 다형성
    - 같은 이름의 메소드가 다르게 구현
    (메소드 *오버로딩, *오버라이딩)




ex) class파일을 두개 만들고 (Client/Pizza)

//피자라는 객체(Object) 생성 //여긴 메인 없음

public class Pizza {

	public void 도우를만들다() {
		System.out.println("도우 만드는 중~");
	}
	public void 토핑을추가하다(String 토핑) {
		System.out.println(토핑 + "토핑추가!");
	}
	
	public void 피자를굽다() {
		System.out.println("피자 굽는 중~");
		
	}

}

--------

//메인은 여기에 있음 

	public static void main(String[] args) {
		//피자 객체(==object) 호출
		Pizza 하와이안피자_치즈듬뿍 = new Pizza(); //클래스 이름, 피자 호출함
		//Pizza를 객체화(==인스턴스화)했다.
		//pizza라는 class(데이터타입)이고 하와이안피자_치즈듬뿍이라는 변수를 갖게됨
		//하와이안피자 만드는 과정
		하와이안피자_치즈듬뿍.도우를만들다();
		하와이안피자_치즈듬뿍.피자를굽다();
		하와이안피자_치즈듬뿍.토핑을추가하다("햄");
		//불고기 피자 만드는 과정
		Pizza 불고기피자 = new Pizza();
		불고기피자.도우를만들다();
		불고기피자.토핑을추가하다("소고기와불고기");
		불고기피자.피자를굽다();
		
	}

}

메소드.to + space bar => 데이터 타입을 볼 수 있음

        String name = "abcd";
		//대문자 -> 소문자 변환해줌
		String result = name.toLowerCase(); => toLowerCase() 메소드이름
		System.out.println(result);




String name = "ABCD";
		String 소문자 = "abcd";
		//대문자 -> 소문자 변환
		String result = name.toLowerCase();
		System.out.println(result);
		//소문자 -> 대문자변환
		result = 소문자.toUpperCase();  //=> 위의 String 소문자의
		//데이터 타입을 가져왔기 때문에 소문자라고 써도됨
		System.out.println(result);   


<공백 삭제>
	String id = " 홍길동";// 이름 앞 공백을 제가하자
		result = id.trim();
		System.out.println(result);
		     

<배열 구분하기> ex)주민번호 입력 체킹시 사용
		String phone = "010-1234-1234";
		String array[] = phone.split("-");
		System.out.println(array[0]);
		System.out.println(array[1]);
		System.out.println(array[2]);

결과 : 
010
1234
1234
		